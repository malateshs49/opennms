package org.opennms.netmgt.alarmd;

import org.kie.api.time.SessionClock;
import org.opennms.netmgt.model.OnmsAlarm;
import org.opennms.netmgt.model.OnmsSeverity;
import org.opennms.netmgt.model.TroubleTicketState;

global org.opennms.netmgt.alarmd.AlarmManager alarmManager;

declare org.opennms.netmgt.model.OnmsAlarm
    @role(event)
    @timestamp(lastEventTime)
end

/*
   <automation name="cosmicClear" interval="30000" active="true"
                trigger-name="selectAlarmsToClear"
                action-name="clearAlarms"
                action-event="sendAlarmClearedEvent" />

    <!-- Find all alarms that can be cleared -->
    <trigger name="selectAlarmsToClear" operator="&gt;=" row-count="1" >
      <statement>
        SELECT *, now() AS _ts FROM alarms as problems
        WHERE alarmType=1
          AND severity &gt; 2
          AND reductionKey IN (SELECT clearKey FROM alarms WHERE alarmType=2 AND lastEventTime &gt; problems.lastEventTime)
      </statement>
    </trigger>
*/
rule "cosmicClear"
  when
    $clear : OnmsAlarm(alarmType == 2)
    $trigger : OnmsAlarm(alarmType == 1, severity.isGreaterThanOrEqual(OnmsSeverity.NORMAL), reductionKey == $clear.clearKey, this before $clear)
  then
    alarmManager.clearAlarm($trigger, $clear.getLastEventTime().getTime());
end

/*
   <automation name="unclear" interval="30000"  active="true"
                trigger-name="selectClearedAlarms"
                action-name="resetSeverity"
                action-event="sendAlarmUnclearedEvent" />
    <!-- This finds problems that have reoccurred since the previoius clear -->
    <trigger name="selectClearedAlarms" operator="&gt;=" row-count="1" >
      <statement>
        SELECT a.alarmid AS _id, a.eventuei AS _eventuei, e.eventseverity AS _sev, now() AS _ts
          FROM alarms a
          JOIN events e
            ON e.eventid = a.lasteventid
         WHERE severity = 2
           AND alarmtype = 1
           AND a.lasteventtime > a.lastautomationtime
      </statement>
    </trigger>

    <action name="resetSeverity" >
      <statement>
        UPDATE alarms
           SET severity = ${_sev}, firstautomationtime = COALESCE(firstautomationtime, ${_ts}), lastautomationtime = ${_ts}
         WHERE alarmid = ${_id}
      </statement>
    </action>

    The lastAutomationTime is set to the time of the clearing event.
*/
rule "unclear"
  when
    $trigger : OnmsAlarm(alarmType == 1,
                         severity == OnmsSeverity.CLEARED, lastEvent != null,
                         OnmsSeverity.get(lastEvent.getEventSeverity()).isGreaterThan(OnmsSeverity.CLEARED),
                         lastEventTime > lastAutomationTime)
  then
    alarmManager.unclearAlarm($trigger);
end

/*
TODO:
    <automation name="escalation" interval="30000" active="false"
                trigger-name="selectSuspectAlarms"
                action-name="escalateAlarm"
                action-event="sendAlarmEscalatedEvent" />
    <trigger name="selectSuspectAlarms" operator="&gt;=" row-count="1" >
      <statement>
          SELECT a.alarmid AS _alarmid,
                 a.eventuei AS _eventuei,
                 a.nodeid AS _nodeid,
                 a.ipaddr AS _ipaddr,
                 a.serviceid AS _serviceid,
                 s.servicename AS _servicename,
                 now() AS _ts
            FROM alarms a
 LEFT OUTER JOIN service s
              ON s.serviceid = a.serviceid
           WHERE ( a.alarmType = 1 OR a.alarmType = 3 )
             AND severity &gt; 3
             AND severity &lt; 7
             AND alarmacktime IS NULL
             AND COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '60 minutes'
      </statement>
    </trigger>
    <action name="escalateAlarm" >
      <statement>
        UPDATE alarms
           SET alarmAckUser = null, alarmAckTime = null, severity = severity +1, firstautomationtime = COALESCE(firstautomationtime, ${_ts}), lastautomationtime = ${_ts}
         WHERE alarmid = ${_alarmid}
      </statement>
    </action>
*/

/*
   <automation name="cleanUp" interval="60000" active="true"
                trigger-name="selectPastClearedAlarmsToDelete"
                action-name="deleteAlarms"
                action-event="sendAlarmDeletedEvent" />

    <!-- Find cleared alarms that can be deleted -->
    <!--  ticket state of 5 is closed, 11 is canceled -->
    <trigger name="selectPastClearedAlarmsToDelete" operator="&gt;=" row-count="1" >
      <statement>
        SELECT alarmid, eventuei, reductionkey, now() AS _ts
          FROM alarms
         WHERE severity &lt;= 3
           AND COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '5 minutes'
           AND (alarmacktime IS NULL AND (tticketState IS NULL OR tticketState = 5  OR tticketState = 11))
      </statement>
    </trigger>
*/
rule "cleanUp"
  salience 0
  when
    $alarm : OnmsAlarm(severity.isLessThanOrEqual(OnmsSeverity.NORMAL) &&
                       alarmAckTime == null &&
                       (TTicketState == null || TTicketState == TroubleTicketState.CLOSED || TTicketState == TroubleTicketState.CANCELLED))
    not( OnmsAlarm( this == $alarm ) over window:time( 5m ) )
  then
    alarmManager.deleteAlarm($alarm);
end

/*
    <automation name="fullCleanUp" interval="300000" active="true"
                trigger-name="selectAllPastClearedAlarmsToDelete"
                action-name="deleteAlarms"
                action-event="sendAlarmDeletedEvent" />

   <!-- Find cleared alarms that can be deleted -->
    <!-- May need to add a check for Open ticket state and wait for the state to be closed based on
         update ticket action-event -->
    <trigger name="selectAllPastClearedAlarmsToDelete" operator="&gt;=" row-count="1" >
      <statement>
        SELECT alarmid, eventuei, reductionkey, now() AS _ts
          FROM alarms
         WHERE severity &lt;= 3
           AND COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '24 hours'
           AND (tticketState IS NULL OR tticketState = 5 OR tticketState = 11)
      </statement>
    </trigger>
*/
rule "fullCleanUp"
  salience 0
  when
    $alarm : OnmsAlarm(severity.isLessThanOrEqual(OnmsSeverity.NORMAL) &&
                        (TTicketState == null || TTicketState == TroubleTicketState.CLOSED || TTicketState == TroubleTicketState.CANCELLED))
    not( OnmsAlarm( this == $alarm ) over window:time( 1d ) )
  then
    alarmManager.deleteAlarm($alarm);
end

/*
    <automation name="GC" interval="300000" active="true"
                trigger-name="selectAlarmsToGarbageCollect"
                action-name="deleteAlarms"
                action-event="sendAlarmDeletedEvent" />
    <trigger name="selectAlarmsToGarbageCollect" operator="&gt;=" row-count="1" >
      <statement>
        SELECT alarmid, eventuei, reductionkey, now() AS _ts
          FROM alarms
         WHERE COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '3 days'
           AND alarmacktime IS NULL
      </statement>
    </trigger>
*/
rule "GC"
  salience 0
  when
    $alarm : OnmsAlarm(alarmAckTime == null)
    not( OnmsAlarm( this == $alarm ) over window:time( 3d ) )
  then
    alarmManager.deleteAlarm($alarm);
end

/*
    <automation name="fullGC" interval="300000" active="true"
                trigger-name="selectAlarmsToFullGarbageCollect"
                action-name="deleteAlarms"
                action-event="sendAlarmDeletedEvent" />

   <trigger name="selectAlarmsToFullGarbageCollect" operator="&gt;=" row-count="1" >
      <statement>
        SELECT alarmid, eventuei, reductionkey, now() AS _ts
          FROM alarms
         WHERE COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '8 days'
      </statement>
    </trigger>
*/
rule "fullGC"
  salience 0
  when
    $alarm : OnmsAlarm()
    not( OnmsAlarm( this == $alarm ) over window:time( 8d ) )
  then
    alarmManager.deleteAlarm($alarm);
end

/*
   <automation name="createTickets" interval="30000" active="false"
                trigger-name="selectNullTicketStateAlarms"
                action-name="acknowledgeAlarm"
                action-event="createTicket" />
    <!-- Find Alarms that are older than 15 minutes with no Ticket ID (Only works with PostgreSQL 8.1 or better) -->
    <trigger name="selectNullTicketStateAlarms" operator="&gt;=" row-count="1" >
      <statement>
          SELECT a.alarmid AS _alarmid,
                 a.eventuei AS _eventuei,
                 'admin' AS _user,
                 a.tticketID AS _tticketID,
                 now() AS _ts
            FROM alarms a
           WHERE a.severity &gt; 2
             AND ( a.alarmType = 1 OR a.alarmType = 3 )
             AND a.alarmAckUser is NULL
             AND a.tticketState IS NULL
             AND GREATEST(lastautomationtime, lasteventtime) &lt; now() - interval '15 minutes'
      </statement>
    </trigger>
    <action name="acknowledgeAlarm" >
      <statement>
        UPDATE alarms
           SET alarmackuser = ${_user}, alarmacktime = ${_ts}, lastautomationtime = ${_ts}
         WHERE alarmid = ${_alarmid}
      </statement>
    </action>
    <action-event name="createTicket" for-each-result="true" >
      <assignment type="field" name="uei" value="uei.opennms.org/troubleTicket/create" />
      <assignment type="parameter" name="alarmUei" value="${_eventuei}" />
      <assignment type="parameter" name="user" value="${_user}" />
      <assignment type="parameter" name="alarmId" value="${_alarmid}" />
    </action-event>
*/
rule "createTickets"
  when
    AlarmTicketerService(isTicketingEnabled() == true)
    $alarm : OnmsAlarm(severity.isGreaterThan(OnmsSeverity.CLEARED) &&
                       (alarmType == 1 || alarmType == 3) &&
                       alarmAckUser == null &&
                       TTicketState == null)
    not( OnmsAlarm( this == $alarm ) over window:time( 15m ) )
  then
    alarmManager.ackAlarmAndCreateTicket($alarm);
end

/*
    <automation name="createCriticalTicket" interval="30000" active="false"
                trigger-name="selectCritialOpenAlarms"
                action-name="acknowledgeAlarm"
                action-event="createTicket" />
    <!-- Find Alarms that are in critical state with no TicketID and open ticket.  This handles issues where
         alarms are continuously being reduced and has escalated high enough to require a ticket when
         the alarm hasn't been escalated. (Only works with PostgreSQL 8.1 or better) -->
    <trigger name="selectCritialOpenAlarms" operator="&gt;=" row-count="1" >
      <statement>
          SELECT a.alarmid AS _alarmid,
                 a.eventuei AS _eventuei,
                 'admin' AS _user,
                 a.tticketID AS _tticketID,
                 now() AS _ts
            FROM alarms a
           WHERE a.severity = 7
             AND ( a.alarmType = 1 OR a.alarmType = 3 )
             AND a.alarmAckUser is NULL
             AND a.tticketState IS NULL
             AND lasteventtime &lt; now() - interval '5 minutes'
      </statement>
    </trigger>
*/
rule "createCriticalTicket"
  when
    AlarmTicketerService(isTicketingEnabled() == true)
    $alarm : OnmsAlarm(severity == OnmsSeverity.CRITICAL &&
                       (alarmType == 1 || alarmType == 3) &&
                       alarmAckUser == null &&
                       TTicketState == null)
    not( OnmsAlarm( this == $alarm ) over window:time( 5m ) )
  then
    alarmManager.ackAlarmAndCreateTicket($alarm);
end

/*
    <automation name="updateTickets" interval="15000" active="false"
                trigger-name="selectNotNullTicketStateAlarms"
                action-name="updateAutomationTime"
                action-event="updateTicket" />
    <!-- Find Alarms that have a TicketState (Only works with PostgreSQL 8.1 or better) -->
    <trigger name="selectNotNullTicketStateAlarms" operator="&gt;=" row-count="1" >
      <statement>
          SELECT a.alarmid AS _alarmid,
                 a.eventuei AS _eventuei,
                 'admin' AS _user,
                 a.tticketID AS _tticketID,
                 now() AS _ts
            FROM alarms a
           WHERE a.severity &gt; 2
             AND ( a.alarmType = 1 OR a.alarmType = 3 )
             AND a.tticketState IS NOT NULL
             AND GREATEST(lastautomationtime, lasteventtime) &lt; now() - interval '15 minutes'
      </statement>
    </trigger>
    <action name="updateAutomationTime" >
      <statement>
        UPDATE alarms
           SET lastautomationtime = ${_ts}
         WHERE alarmid = ${_alarmid}
      </statement>
    </action>
    <action-event name="updateTicket" for-each-result="true" >
      <assignment type="field" name="uei" value="uei.opennms.org/troubleTicket/update" />
      <assignment type="parameter" name="alarmUei" value="${_eventuei}" />
      <assignment type="parameter" name="user" value="${_user}" />
      <assignment type="parameter" name="alarmId" value="${_alarmid}" />
      <assignment type="parameter" name="troubleTicket" value="${_tticketID}" />
    </action-event>
*/
rule "updateTickets"
  when
    AlarmTicketerService(isTicketingEnabled() == true)
    $alarm : OnmsAlarm(severity.isGreaterThan(OnmsSeverity.CLEARED) &&
                       (alarmType == 1 || alarmType == 3) &&
                       TTicketState != null)
    // FIXME: not( OnmsAlarm( this == $alarm ) over window:time( 15m ) )
  then
    alarmManager.updateTicket($alarm);
end

/*
    <automation name="closeClearedAlarmTickets" interval="60000" active="false"
                trigger-name="selectClearedAlarmWithOpenTicketState"
                action-name="updateAutomationTime"
                action-event="closeTicket" />
    <!-- Find Alarms that have cleared and have an open ticket state (Only works with PostgreSQL 8.1 or better) -->
    <trigger name="selectClearedAlarmWithOpenTicketState" operator="&gt;=" row-count="1" >
      <statement>
          SELECT a.alarmid AS _alarmid,
                 a.eventuei AS _eventuei,
                 'admin' AS _user,
                 a.tticketID AS _tticketID,
                 now() AS _ts
            FROM alarms a
           WHERE a.severity = 2
             AND a.alarmType = 1
             AND a.tticketState = 0
             AND GREATEST(lastautomationtime, lasteventtime) &lt; now() - interval '15 minutes'
      </statement>
    </trigger>
    <action-event name="closeTicket" for-each-result="true" >
      <assignment type="field" name="uei" value="uei.opennms.org/troubleTicket/close" />
      <assignment type="parameter" name="alarmUei" value="${_eventuei}" />
      <assignment type="parameter" name="user" value="${_user}" />
      <assignment type="parameter" name="alarmId" value="${_alarmid}" />
      <assignment type="parameter" name="troubleTicket" value="${_tticketID}" />
    </action-event>
*/
rule "closeClearedAlarmTickets"
  when
    AlarmTicketerService(isTicketingEnabled() == true)
    $alarm : OnmsAlarm(severity == OnmsSeverity.CLEARED &&
                       alarmType == 1 &&
                       TTicketState == TroubleTicketState.OPEN)
     // FIXME: not( OnmsAlarm( this == $alarm ) over window:time( 15m ) )
  then
    alarmManager.closeTicket($alarm);
end

/*  <automation name="clearAlarmsForClosedTickets" interval="60000" active="false"
                  trigger-name="selectClosedTicketStateForProblemAlarms"
                  action-name="clearClosedTicketAlarms" />
    <!-- Find Alarms that have a closed ticket state that haven't been cleared, yet. State 5 is closed. -->
    <trigger name="selectClosedTicketStateForProblemAlarms" operator="&gt;=" row-count="1" >
      <statement>
          SELECT a.alarmid AS _alarmid, a.eventuei AS _eventUei, e.eventseverity AS _sev, now() AS _ts
                 now() AS _ts
            FROM alarms a
           WHERE a.tticketstate = 5
             AND a.severity &gt; 2
             AND ( a.alarmType = 1 OR a.alarmType = 3 )
      </statement>
    </trigger>
   <!--  clear alarms that have a trouble ticket assigned as closed and alarm has not cleared-->
    <action name="clearClosedTicketAlarms" >
      <statement>
        UPDATE alarms
           SET severity=2, firstautomationtime = COALESCE(firstautomationtime, ${_ts}), lastautomationtime = ${_ts}
         WHERE alarmid = ${_alarmid}
      </statement>
    </action>
*/
rule "clearAlarmsForClosedTickets"
  when
    AlarmTicketerService(isTicketingEnabled() == true)
    $alarm : OnmsAlarm(severity.isGreaterThan(OnmsSeverity.CLEARED) &&
                       (alarmType == 1 || alarmType == 3) &&
                       TTicketState == TroubleTicketState.CLOSED)
  then
    alarmManager.clearAlarm($alarm, drools.getWorkingMemory().getSessionClock().getCurrentTime());
end
